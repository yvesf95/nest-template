{
  // Place your nest-template workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create a command handler": {
    "scope": "typescript",
    "prefix": "cqrs-command",
    "body": [
      "import { Logger } from '@nestjs/common';",
      "import { CommandHandler, ICommandHandler } from \"@nestjs/cqrs\";",
      "",
      "export class ${1:SampleCommand} {",
      "  constructor(public ${2:id}: ${3|string,number,boolean|}) {}",
      "}",
      "",
      "@CommandHandler($1)",
      "export class $1Handler implements ICommandHandler<$1> {",
      "  private readonly logger = new Logger($1Handler.name)",
      "  constructor(private readonly ${4}: ${4/(.*)/${1:/capitalize}/}) {}",
      "",
      "  async execute(command: $1): Promise<void> {",
      "    this.logger.debug(`WILL handle ${$1.name}`, command);",
      "    try {",
      "      ${5:throw new Error('Method not implemented.');}${0}",
      "",
      "      this.logger.debug(`DID handle ${$1.name}`, command);",
      "    } catch (e) {",
      "      this.logger.error(`FAILED to handle ${$1.name}`, e.stack, command);",
      "      throw e;",
      "    }",
      "  }",
      "}",
      "",
    ],
    "description": "Create a command handler",
  },
  "Create a query handler": {
    "scope": "typescript",
    "prefix": "cqrs-query",
    "body": [
      "import { QueryHandler, IQueryHandler } from \"@nestjs/cqrs\";",
      "",
      "export class ${1:SampleQuery} {",
      "  constructor(public ${2:id}: ${3|string,number,boolean|}, public limit?: number, public cursor?: string) {}",
      "}",
      "",
      "export class $1Response {",
      "  ${6:id}: ${7|string,number,boolean|}",
      "}",
      "",
      "@QueryHandler($1)",
      "export class $1Handler implements IQueryHandler<$1, $1Response> {",
      "  constructor(private readonly ${4}: ${4/(.*)/${1:/capitalize}/}) {}",
      "",
      "  async execute(query: $1): Promise<$1Response> {",
      "    return { $6: '$7' }",
      "  }",
      "}",
    ],
    "description": "Create a query handler",
  },
}
